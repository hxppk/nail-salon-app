generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      String   @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Member {
  id               String          @id @default(cuid())
  name             String
  phone            String          @unique
  email            String?
  birthday         DateTime?
  gender           String?
  address          String?
  membershipLevel  String          @default("BRONZE")
  points           Int             @default(0)
  balance          Float           @default(0)
  totalSpent       Float           @default(0)
  cashSpent        Float           @default(0)
  visitCount       Int             @default(0)
  debtAmount       Float           @default(0)
  joinDate         DateTime        @default(now())
  lastVisit        DateTime?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  appointments Appointment[]
  transactions Transaction[]

  @@map("members")
}

model Staff {
  id          String   @id @default(cuid())
  name        String
  phone       String   @unique
  email       String?
  specialties String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]

  @@map("staff")
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique // 服务项目名称，必填且唯一
  description String?  // 服务描述，可选
  price       Float    // 服务价格，必填
  duration    Int      @default(180) // 服务时长（分钟），默认180分钟
  category    String?  // 服务分类，可选 (如"基础护理"、"美甲设计"等)
  isActive    Boolean  @default(true) // 是否激活
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointmentServices AppointmentService[]

  @@map("services")
}

model Appointment {
  id          String            @id @default(cuid())
  memberId    String?           // Optional for non-member appointments
  staffId     String
  customerName String           // For both member and non-member appointments
  customerPhone String          // For both member and non-member appointments
  customerGender String?        // MALE, FEMALE
  guestCount  Int               @default(1) // Number of guests
  maleGuests  Int               @default(0)
  femaleGuests Int              @default(0)
  startTime   DateTime
  endTime     DateTime
  serviceName String            // Service name for display
  duration    Int               @default(180) // Service duration in minutes
  status      String            @default("PENDING") // PENDING, CONFIRMED, ARRIVED, IN_SERVICE, COMPLETED, CANCELLED, OVERDUE
  source      String            @default("MANUAL") // MANUAL, PHONE, APP
  notes       String?
  userNotes   String?           // Customer notes
  merchantNotes String?         // Merchant notes
  totalAmount Float             @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  member   Member?              @relation(fields: [memberId], references: [id], onDelete: SetNull)
  staff    Staff                @relation(fields: [staffId], references: [id])
  services AppointmentService[]
  transactions Transaction[]

  @@map("appointments")
}

model AppointmentService {
  id            String @id @default(cuid())
  appointmentId String
  serviceId     String

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id])

  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

model Transaction {
  id            String          @id @default(cuid())
  memberId      String
  appointmentId String?
  type          String          // RECHARGE, CONSUME, POINTS_REDEEM, REFUND
  amount        Float
  balanceBefore Float           @default(0)
  balanceAfter  Float           @default(0)
  pointsEarned  Int             @default(0)
  pointsUsed    Int             @default(0)
  paymentMethod String?         // CASH, CARD, ALIPAY, WECHAT, BALANCE
  description   String
  operatorName  String?
  createdAt     DateTime        @default(now())

  member      Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id])

  @@map("transactions")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}


// SQLite does not support enums, using String types instead
// Valid values for reference:
// UserRole: ADMIN, STAFF, CUSTOMER
// Gender: MALE, FEMALE, OTHER  
// MembershipLevel: BRONZE, SILVER, GOLD, PLATINUM
// AppointmentStatus: PENDING, CONFIRMED, ARRIVED, IN_SERVICE, COMPLETED, CANCELLED, OVERDUE
// AppointmentSource: MANUAL, PHONE, APP
// TransactionType: RECHARGE, CONSUME, POINTS_REDEEM, REFUND
// PaymentMethod: CASH, CARD, ALIPAY, WECHAT, BALANCE